#remove the # to run; if the packages are pre-loaded, ignore
#install.packages("nflfastR")
#install.packages("ggimage")
#install.packages("gt")

# Load packages
#library(tidyverse)
#library(nflfastR)
#library(ggimage)
#library(gt)

#load play-by-play data from 2020-2023 into R Studio
pbp <- load_pbp(2020:2021:2022:2023)
# Let's look at the first five rows using head()
pbp %>% head()

# Check and see the column names
names(pbp)

# Check how many rows are in pbp
nrow(pbp)
# Clean the dataset to get just rushes and passes using filter()
pbp_rp <- pbp %>%
  filter(rush == 1 | pass == 1) %>%
  filter(!is.na(epa))


# Who was Rams' best receivers last season?
pbp_rp %>%
  filter(posteam == "LA") %>%
  filter(!is.na(receiver_player_name)) %>%
  group_by(receiver_player_name) %>%
  summarize(receptions = n(),
            avg_epa = mean(epa, na.rm = TRUE)) %>%
  filter(receptions >= 10) %>%
  arrange(-avg_epa)

# Let's compare offense in 2020 vs. 2021, 2022 vs 2023
offenses_20 <- pbp_rp %>%
  filter(season == 2020) %>%
  group_by(posteam) %>%
  summarize(epa_20 = mean(epa))

offenses_21 <- pbp_rp %>%
  filter(season == 2021) %>%
  group_by(posteam) %>%
  summarize(epa_21 = mean(epa))

offenses_22 <- pbp_rp %>%
  filter(season == 2022) %>%
  group_by(posteam) %>%
  summarize(epa_22 = mean(epa))

offenses_23 <- pbp_rp %>%
  filter(season == 2023) %>%
  group_by(posteam) %>%
  summarize(epa_23 = mean(epa))

# Joining the two years together and adding the team logos

offenses_all <- offenses_20 %>%
  left_join(offenses_21, by = "posteam")
offenses_all <- offenses_22 %>%
  left_join(offenses_23, by = "posteam")

# Open teams_colors_logos
View(teams_colors_logos)

offenses_all <- offenses_all %>%
  left_join(teams_colors_logos, by = c("posteam" = "team_abbr"))
summary(offenses_all$epa_20)
summary(offenses_all$epa_21)
summary(offenses_all$epa_22)
summary(offenses_all$epa_23)


# Now we can make our plot with team logos!2022 vs 2023
offenses_all %>%
  ggplot(aes(x = epa_22, y = epa_23)) +
  geom_hline(yintercept = mean(offenses_all$epa_22), linetype = "dashed") +
  geom_vline(xintercept = mean(offenses_all$epa_23), linetype = "dashed") +
  geom_smooth(color = "black") +
  geom_image(aes(image = team_logo_espn), asp = 16/9, size = 0.05) +
  theme_bw() +
  labs(x = "Offensive EPA/Play in 2022",
       y = "Offensive EPA/Play in 2023",
       title = "Offensive EPA/Play in 2022 Compared to 2023",
       caption = "By Lucas Qiu") +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5))

#save plot
ggsave('off-epa-20-21.png', width = 14, height = 10, dpi = "retina")

# Ensure the pbp_rp data frame has the necessary columns
str(pbp_rp)

# Using mutate() to create the 'yards_past_sticks' column
pbp_rp <- pbp_rp %>%
  mutate(yards_past_sticks = air_yards - ydstogo)

# Check if the new column has been created
str(pbp_rp)

# Aggregating quarterback data and joining with team logos
qb_agg <- pbp_rp %>%
  filter(!is.na(yards_past_sticks)) %>%
  filter(down %in% c(3, 4)) %>%  # Filter for 3rd and 4th downs
  group_by(passer_player_name) %>%
  summarize(passes = n(),
            avg_yps = mean(yards_past_sticks, na.rm = TRUE),
            team_abbr = last(posteam)) %>%
  filter(passes >= 70) %>%
  left_join(teams_colors_logos, by = "team_abbr") 

qb_agg <- qb_agg[-4, ]
# Making a bar graph
qb_agg %>%
  ggplot(aes(x = avg_yps, y = fct_reorder(passer_player_name, avg_yps))) +
  geom_bar(aes(fill = team_color, color = team_color2), stat = "identity") +
  scale_color_identity(aesthetics = c("fill", "color")) +
  theme_bw() +
  labs(x = "Average 3rd & 4th-Down Yards Past Sticks",
       y = "Passer Name",
       title = "How Aggressive Each Quarterback is on Late Downs",
       subtitle = "2020-2024, minimum of 70 passes to be included") +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        panel.grid.major.y = element_line(size = 0.1))

str(pbp_rp)
#create the 'yards_past_sticks' column
pbp_rp <- pbp_rp %>%
  mutate(yards_past_sticks = air_yards - ydstogo)

#verify new column has been created
str(pbp_rp)

# Filter and aggregate data for Rams receivers on late downs
rams_receivers_agg <- pbp_rp %>%
  filter(!is.na(yards_past_sticks)) %>%
  filter(down %in% c(3, 4), posteam == "LA") %>%  # Filter for 3rd and 4th downs and Rams
  group_by(receiver_player_name) %>%
  summarize(passes = n(),
            avg_yps = mean(yards_past_sticks, na.rm = TRUE)) %>%
  filter(passes >= 15)  # Set a threshold for minimum passes to be included

rams_receivers_agg <- rams_receivers_agg [-14, ]
# Install and load necessary package
if (!require("ggimage")) install.packages("ggimage")
library(ggimage)

# Define Rams official colors
rams_blue <- "#003594"  # Rams Blue
rams_yellow <- "#FFA300"  # Rams Yellow

# Extract the Rams logo from the teams_colors_logos dataframe
rams_logo_url <- teams_colors_logos %>%
  filter(team_abbr == "LA") %>%
  pull(team_logo_espn)

# Calculate positions for the logo
max_avg_yps <- max(rams_receivers_agg$avg_yps)
num_receivers <- nrow(rams_receivers_agg)

# Making a bar graph with Rams official colors and logo
rams_plot <- rams_receivers_agg %>%
  ggplot(aes(x = avg_yps, y = fct_reorder(receiver_player_name, avg_yps))) +
  geom_bar(stat = "identity", fill = rams_blue, color = rams_yellow) +
  theme_bw() +
  labs(x = "Average 3rd & 4th-Down Yards Past Sticks",
       y = "Receiver Name",
       title = "How Aggressive Rams Receivers are on Late Downs",
       subtitle = "2020-2024, minimum of 20 passes to be included",
      caption = "By Lucas Qiu") +
  theme(plot.title = element_text(size = 18, face = "bold", hjust = 0.5),
        plot.subtitle = element_text(size = 14, hjust = 0.5),
        panel.grid.major.y = element_line(size = 0.1))

# Adding the Rams logo to the plot with adjusted coordinates
rams_plot <- rams_plot +
  ggimage::geom_image(aes(x = max_avg_yps * 0.9, y = num_receivers * 0.1, image = rams_logo_url), 
                      size = 0.1, inherit.aes = FALSE, 
                      by = "width", hjust = 1, vjust = 1)

# Print the plot
print(rams_plot)
